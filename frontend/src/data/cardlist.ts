import { TImageCard } from "../types";

export const CARDLIST: TImageCard[] = [
  {
    id: 1,
    name: "Affectation / Initialisation",
    src: "/assets/affectation_initialisation.png",
    alt: "",
    description: "L'affectation consiste à donner une valeur à une variable dans un programme.\n  L'initialisation est la première affectation d'une valeur à une variable, au moment où on la crée.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 2,
    name: "Allocation",
    src: "/assets/allocation.png",
    alt: "",
    description: "L'allocation consiste à réserver de la mémoire pour stocker des données lors de l'exécution d'un programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 3,
    name: "Arbre",
    src: "/assets/arbre2.png",
    alt: "",
    description: "Un arbre est une structure de données organisée de manière hiérarchique, composée de \"nœuds\" connectés entre eux. Chaque nœud peut avoir des sous-nœuds appelés \"enfants\". Le nœud principal est appelé \"racine\", et les nœuds sans enfants sont appelés \"feuilles\".",
    author: "Fabien Poirier",
    category: "Data Structure",
  },
  {
    id: 4,
    name: "Assertion",
    src: "/assets/assertion2.png",
    alt: "",
    description: "Une assertion est une instruction qui vérifie si une condition est vraie à un moment donné. Si la condition est fausse, elle signale généralement une erreur et peut arrêter le programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 5,
    name: "Bit",
    src: "/assets/bit3.png",
    alt: "",
    description: "Un bit est l’unité de base de l’information en informatique. Il peut prendre deux valeurs : 0 ou 1, représentant les états de \"faux\" ou \"vrai\", \"éteint\" ou \"allumé\".",
    author: "Fabien Poirier",
    category: "Type",
  },
  {
    id: 6,
    name: "Boolean",
    src: "/assets/boolean.png",
    alt: "",
    description: "Un boolean est un type de donnée qui ne peut prendre que deux valeurs : true (vrai) ou false (faux).",
    author: "Fabien Poirier",
    category: "Type",
  },
  {
    id: 7,
    name: "Boucle",
    src: "/assets/boucle.png",
    alt: "",
    description: "Une boucle est une structure de contrôle qui permet de répéter une série d'instructions plusieurs fois. Elle continue de s'exécuter tant qu'une certaine condition est vraie.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 8,
    name: "Boucle",
    src: "/assets/boucle2.png",
    alt: "",
    description: "Une boucle est une structure de contrôle qui permet de répéter une série d'instructions plusieurs fois. Elle continue de s'exécuter tant qu'une certaine condition est vraie.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 9,
    name: "Byte",
    src: "/assets/byte.png",
    alt: "",
    description: "Un byte est une unité de mesure informatique qui regroupe 8 bits.",
    author: "Fabien Poirier",
    category: "Data Structure",
  },
  {
    id: 10,
    name: "Cast",
    src: "/assets/cast.png",
    alt: "",
    description: "Le cast est une opération qui permet de convertir une variable d'un type de données à un autre.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 11,
    name: "Char",
    src: "/assets/char.png",
    alt: "",
    description: "En programmation, un char est un type de donnée utilisé pour stocker un seul caractère, comme une lettre, un chiffre ou un symbole.",
    author: "Fabien Poirier",
    category: "Type",
  },
  {
    id: 12,
    name: "Char vs Int",
    src: "/assets/char_vs_int.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 13,
    name: "Char vs String",
    src: "/assets/char_vs_string.png",
    alt: "",
    description: "Un char représente un seul caractère, tandis que String est une séquence de caractères.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 14,
    name: "Classe",
    src: "/assets/classe1.png",
    alt: "",
    description: "En programmation orientée objet, une classe est une structure qui définit un type d'objet, encapsulant des données (sous forme d'attributs) et des comportements (sous forme de méthodes). Une classe sert de modèle pour créer des objets.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 15,
    name: "Classe",
    src: "/assets/classe2.png",
    alt: "",
    description: "En programmation orientée objet, une classe est une structure qui définit un type d'objet, encapsulant des données (sous forme d'attributs) et des comportements (sous forme de méthodes). Une classe sert de modèle pour créer des objets.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 16,
    name: "Classe",
    src: "/assets/classe3.png",
    alt: "",
    description: "En programmation orientée objet, une classe est une structure qui définit un type d'objet, encapsulant des données (sous forme d'attributs) et des comportements (sous forme de méthodes). Une classe sert de modèle pour créer des objets.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 17,
    name: "Classe Abstraite",
    src: "/assets/classe_abstraite.png",
    alt: "",
    description: "En programmation orientée objet une classe abstraite est une classe qui ne peut pas être instanciée directement. Elle sert de modèle pour d'autres classes et peut contenir des méthodes abstraites (sans implémentation) qui doivent être définies par les classes dérivées. Les classes abstraites permettent de définir des comportements communs tout en laissant la flexibilité aux sous-classes de fournir des détails spécifiques.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 18,
    name: "Collection",
    src: "/assets/collection.png",
    alt: "",
    description: "En programmation, une collection est une structure de données qui regroupe plusieurs éléments, souvent de même type, permettant de les manipuler de manière efficace.",
    author: "Fabien Poirier",
    category: "Data Structure",
  },
  {
    id: 19,
    name: "Commentaire",
    src: "/assets/commentaire.png",
    alt: "",
    description: "Un commentaire est une note ou une explication insérée dans le code source d'un programme qui n'est pas exécutée par le compilateur ou l'interpréteur.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 20,
    name: "Compiler",
    src: "/assets/compiler.png",
    alt: "",
    description: "Un compilateur est un programme qui traduit le code source écrit dans un langage de programmation de haut niveau en un code machine ou en bytecode compréhensible par l'ordinateur.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 21,
    name: "Concatenation",
    src: "/assets/concatenation.png",
    alt: "",
    description: "La concaténation est l'opération qui consiste à unir deux ou plusieurs chaînes de caractères pour en former une seule.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 22,
    name: "Condition",
    src: "/assets/condition1.png",
    alt: "",
    description: "Une condition est une règle qui permet de prendre des décisions dans un programme. Elle vérifie si quelque chose est vrai ou faux.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 23,
    name: "Condition",
    src: "/assets/condition2.png",
    alt: "",
    description: "Une condition est une règle qui permet de prendre des décisions dans un programme. Elle vérifie si quelque chose est vrai ou faux.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 24,
    name: "Condition ternaire",
    src: "/assets/condition_ternaire.png",
    alt: "",
    description: "La condition ternaire est un moyen de décider entre deux valeurs selon si une condition est vraie ou fausse.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 25,
    name: "Connecteur logique",
    src: "/assets/connecteur_logique.png",
    alt: "",
    description: "Un connecteur logique est un mot ou un symbole qui relie des idées ou des conditions dans un programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 26,
    name: "Constructeur",
    src: "/assets/constructeur.png",
    alt: "",
    description: "Un constructeur est une méthode spéciale dans une classe qui est utilisée pour créer et initialiser des objets.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 27,
    name: "Déclarer",
    src: "/assets/declarer.png",
    alt: "",
    description: "En programmation, déclarer signifie annoncer au programme qu'on va utiliser une variable, une fonction, ou une classe. Cela implique de donner un nom à l'élément et, parfois, de spécifier son type.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 28,
    name: "Deprecated",
    src: "/assets/deprecated.png",
    alt: "",
    description: "En programmation, le terme \"deprecated\" (ou \"obsolète\" en français) désigne une fonctionnalité, une méthode ou une API qui est encore présente dans le code mais qui est déconseillée à utiliser. ",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 29,
    name: "Destructeur",
    src: "/assets/destructeur.png",
    alt: "",
    description: "Un destructeur est une méthode spéciale dans une classe qui est appelée automatiquement lorsque un objet de cette classe est détruit ou n'est plus nécessaire. Le rôle du destructeur est de libérer les ressources utilisées par l'objet, comme la mémoire ou les fichiers ouverts.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 30,
    name: "Encapsulation",
    src: "/assets/encapsulation.png",
    alt: "",
    description: "L'encapsulation est un principe de la programmation orientée objet qui consiste à protéger les données d'un objet en les rendant privées et en contrôlant l'accès à ces données via des méthodes publiques. Cela signifie que l'on peut cacher les détails internes d'un objet tout en permettant d'interagir avec lui de manière sécurisée.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 31,
    name: "Encapsulation",
    src: "/assets/encapsulation2.png",
    alt: "",
    description: "L'encapsulation est un principe de la programmation orientée objet qui consiste à protéger les données d'un objet en les rendant privées et en contrôlant l'accès à ces données via des méthodes publiques. Cela signifie que l'on peut cacher les détails internes d'un objet tout en permettant d'interagir avec lui de manière sécurisée.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 32,
    name: "Encapsulation",
    src: "/assets/encapsulation3.png",
    alt: "",
    description: "L'encapsulation est un principe de la programmation orientée objet qui consiste à protéger les données d'un objet en les rendant privées et en contrôlant l'accès à ces données via des méthodes publiques. Cela signifie que l'on peut cacher les détails internes d'un objet tout en permettant d'interagir avec lui de manière sécurisée.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 33,
    name: "Entrée Sortie",
    src: "/assets/entree_sortie.png",
    alt: "",
    description: "En informatique, l'entrée/sortie désigne les moyens par lesquels un programme reçoit des données (entrée) et envoie des résultats (sortie).",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 34,
    name: "Enumération",
    src: "/assets/enumeration.png",
    alt: "",
    description: "En programmation, une énumération (ou \"enum\") est un type de donnée qui permet de définir un ensemble de valeurs constantes.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 35,
    name: "Enumération",
    src: "/assets/enumeration2.png",
    alt: "",
    description: "En programmation, une énumération (ou \"enum\") est un type de donnée qui permet de définir un ensemble de valeurs constantes.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 36,
    name: "Enumération",
    src: "/assets/enumeration3.png",
    alt: "",
    description: "En programmation, une énumération (ou \"enum\") est un type de donnée qui permet de définir un ensemble de valeurs constantes.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 37,
    name: "Error / Failure",
    src: "/assets/error_vs_failure.png",
    alt: "",
    description: "Une erreur indique souvent un problème dans le code, tandis qu'une failure (échec) se réfère à une incapacité à atteindre un objectif, même si le code s'exécute sans erreurs.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 38,
    name: "Et",
    src: "/assets/et.png",
    alt: "",
    description: "En programmation, \"ET\" est un connecteur logique utilisé pour combiner deux conditions. Il permet de vérifier si les deux conditions sont vraies en même temps.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 39,
    name: "Extends",
    src: "/assets/extends.png",
    alt: "",
    description: "En programmation orientée objet, le mot-clé \"extends\" est utilisé pour indiquer qu'une classe hérite des propriétés et des méthodes d'une autre classe.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 40,
    name: "Extends",
    src: "/assets/extends2.png",
    alt: "",
    description: "En programmation orientée objet, le mot-clé \"extends\" est utilisé pour indiquer qu'une classe hérite des propriétés et des méthodes d'une autre classe.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 41,
    name: "Extends",
    src: "/assets/extends3.png",
    alt: "",
    description: "En programmation orientée objet, le mot-clé \"extends\" est utilisé pour indiquer qu'une classe hérite des propriétés et des méthodes d'une autre classe.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 42,
    name: "Extends",
    src: "/assets/extends4.png",
    alt: "",
    description: "En programmation orientée objet, le mot-clé \"extends\" est utilisé pour indiquer qu'une classe hérite des propriétés et des méthodes d'une autre classe.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 43,
    name: "Extends",
    src: "/assets/extends5.png",
    alt: "",
    description: "En programmation orientée objet, le mot-clé \"extends\" est utilisé pour indiquer qu'une classe hérite des propriétés et des méthodes d'une autre classe.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 44,
    name: "FIFO",
    src: "/assets/fifo.png",
    alt: "",
    description: "FIFO est une méthode de gestion des données dans laquelle les éléments sont traités dans l'ordre dans lequel ils ont été ajoutés. Cela signifie que le premier élément ajouté sera le premier à être retiré. On peut le comparer à une file d'attente dans la vie réelle, où la première personne à entrer dans la file est la première à être servie.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 45,
    name: "Fonction",
    src: "/assets/fonction1.png",
    alt: "",
    description: "En programmation, une fonction est un bloc de code réutilisable qui effectue une tâche spécifique. Elle prend des entrées (appelées paramètres ou arguments), effectue des opérations sur ces entrées, et renvoye une sortie (ou résultat).",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 46,
    name: "Fonction",
    src: "/assets/fonction2.png",
    alt: "",
    description: "En programmation, une fonction est un bloc de code réutilisable qui effectue une tâche spécifique. Elle prend des entrées (appelées paramètres ou arguments), effectue des opérations sur ces entrées, et renvoye une sortie (ou résultat).",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 47,
    name: "Garbage collector",
    src: "/assets/garbage_collector.png",
    alt: "",
    description: "Le garbage collector est un mécanisme automatique de gestion de la mémoire dans certains langages de programmation, comme Java. Il a pour rôle de libérer la mémoire occupée par des objets qui ne sont plus utilisés, afin d'éviter les fuites de mémoire et de garantir une utilisation efficace des ressources.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 48,
    name: "Global / Local",
    src: "/assets/global_vs_local.png",
    alt: "",
    description: "En programmation, les termes \"global\" et \"local\" se réfèrent à la portée (ou \"scope\") des variables, c'est-à-dire l'endroit où elles peuvent être utilisées dans le code.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 49,
    name: "Héritage",
    src: "/assets/heritage.png",
    alt: "",
    description: "En programmation orientée objet, l'héritage est un concept qui permet à une classe (appelée \"sous-classe\" ou \"classe dérivée\") de recevoir des propriétés et des méthodes d'une autre classe (appelée \"super-classe\" ou \"classe parent\").",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 50,
    name: "Héritage",
    src: "/assets/heritage2.png",
    alt: "",
    description: "En programmation orientée objet, l'héritage est un concept qui permet à une classe (appelée \"sous-classe\" ou \"classe dérivée\") de recevoir des propriétés et des méthodes d'une autre classe (appelée \"super-classe\" ou \"classe parent\").",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 51,
    name: "Implementer",
    src: "/assets/implementer.png",
    alt: "",
    description: "En programmation, \"implémenter\" signifie mettre en œuvre une fonctionnalité ou une méthode définie dans un programme. Cela implique généralement de créer le code nécessaire pour que la fonction, la classe ou l'interface fonctionne comme prévu.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 52,
    name: "Implementer",
    src: "/assets/implements.png",
    alt: "",
    description: "En programmation, \"implémenter\" signifie mettre en œuvre une fonctionnalité ou une méthode définie dans un programme. Cela implique généralement de créer le code nécessaire pour que la fonction, la classe ou l'interface fonctionne comme prévu.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 53,
    name: "Implementer",
    src: "/assets/implements2.png",
    alt: "",
    description: "En programmation, \"implémenter\" signifie mettre en œuvre une fonctionnalité ou une méthode définie dans un programme. Cela implique généralement de créer le code nécessaire pour que la fonction, la classe ou l'interface fonctionne comme prévu.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 54,
    name: "Importation",
    src: "/assets/importation.png",
    alt: "",
    description: "En programmation, l'importation est le processus par lequel vous pouvez utiliser du code ou des bibliothèques écrits dans d'autres fichiers ou modules dans votre propre programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 55,
    name: "Incrémentation / Décrémentation",
    src: "/assets/incrementdecrement.png",
    alt: "",
    description: "L'incrémentation est une opération qui augmente la valeur d'une variable de 1, tandis que la décrémentation réduit cette valeur de 1.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 56,
    name: "Instance",
    src: "/assets/instances.png",
    alt: "",
    description: "En programmation orientée objet, une instance est un objet créé à partir d'une classe.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 57,
    name: "Int / Float / Double",
    src: "/assets/int_vs_float_vs_double.png",
    alt: "",
    description: "Int, float et double sont des types de données utilisés pour représenter des nombres, où int est pour les entiers (sans décimales), float est pour les nombres à virgule flottante avec une précision simple, et double est pour les nombres à virgule flottante avec une précision double, permettant de gérer des valeurs plus grandes ou plus précises.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 58,
    name: "Integer",
    src: "/assets/integer.png",
    alt: "",
    description: "En programmation, un \"integer\" est un type de données qui représente des nombres entiers.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 59,
    name: "Interface",
    src: "/assets/interface.png",
    alt: "",
    description: "En programmation orientée objet, une interface est un contrat qui définit un ensemble de méthodes qu'une classe doit implémenter, sans fournir d'implémentation pour ces méthodes.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 60,
    name: "LIFO",
    src: "/assets/lifo.png",
    alt: "",
    description: "LIFO (Last In, First Out) est une méthode de gestion des données où le dernier élément ajouté est le premier à être retiré, comme dans une pile d'assiettes où vous prenez toujours la dernière assiette placée au-dessus.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 61,
    name: "Méthode",
    src: "/assets/methodes.png",
    alt: "",
    description: "En programmation, une méthode est une suite d'instruction qui décrit un comportement ou une action.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 62,
    name: "Modulo",
    src: "/assets/modulo.png",
    alt: "",
    description: "L'opérateur modulo (souvent représenté par le symbole %) calcule le reste d'une division entre deux nombres.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 63,
    name: "Natif",
    src: "/assets/natif.png",
    alt: "",
    description: "Le terme \"natif\" se réfère généralement à quelque chose qui est développé pour fonctionner directement avec un système ou une plateforme particulière, sans nécessiter de traduction ou d'adaptation supplémentaire.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 64,
    name: "Not",
    src: "/assets/not.png",
    alt: "",
    description: "\"not\" est un opérateur logique qui inverse la valeur d'une condition. Si la condition est vraie, l'opérateur \"not\" la transforme en fausse, et vice versa.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 65,
    name: "Objet",
    src: "/assets/objet1.png",
    alt: "",
    description: "En programmation orientée objet, un objet est une instance d'une classe qui regroupe des données (appelées attributs) et des comportements (appelés méthodes) liés à une entité spécifique.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 66,
    name: "Objet",
    src: "/assets/objet2.png",
    alt: "",
    description: "En programmation orientée objet, un objet est une instance d'une classe qui regroupe des données (appelées attributs) et des comportements (appelés méthodes) liés à une entité spécifique.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 67,
    name: "Optimiser",
    src: "/assets/optimiser.png",
    alt: "",
    description: "En programmation, optimiser signifie améliorer l'efficacité d'un programme ou d'un algorithme pour qu'il utilise moins de ressources, comme le temps d'exécution ou la mémoire.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 68,
    name: "Ou",
    src: "/assets/ou.png",
    alt: "",
    description: "\"OU\" (ou \"OR\" en anglais) est un opérateur logique qui renvoie vrai si au moins une des conditions qu'il relie est vraie.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 69,
    name: "Ou Exclusif",
    src: "/assets/ou_exclusif.png",
    alt: "",
    description: "En programmation, l'opérateur \"OU exclusif\" (XOR en anglais) est un opérateur logique qui renvoie vrai si exactement une des conditions qu'il relie est vraie, mais pas les deux.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 70,
    name: "Override",
    src: "/assets/override.gif",
    alt: "",
    description: "En programmation orientée objet, \"override\" signifie passer outre une méthode d'une classe et la remplacer par une nouvelle version dans une classe dérivée (ou sous-classe).",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 71,
    name: "Override",
    src: "/assets/override2.png",
    alt: "",
    description: "En programmation orientée objet, \"override\" signifie passer outre une méthode d'une classe et la remplacer par une nouvelle version dans une classe dérivée (ou sous-classe).",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 72,
    name: "Package",
    src: "/assets/package.png",
    alt: "",
    description: "Un \"package\" est un dossier regroupant ensemble de classes, interfaces et autres ressources, permettant d'organiser et de structurer le code de manière logique.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 73,
    name: "Passage par copie",
    src: "/assets/passage_par_copie.png",
    alt: "",
    description: "Le passage par copie (ou \"pass by value\" en anglais) signifie que lorsque vous transmettez une variable à une fonction ou à une méthode, une copie de la valeur de cette variable est faite.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 74,
    name: "Passage par reference",
    src: "/assets/passage_par_reference.png",
    alt: "",
    description: "Le passage par référence signifie que lorsque vous transmettez une variable à une fonction ou à une méthode, vous passez une référence à l'emplacement de la mémoire où cette variable est stockée, plutôt qu'une copie de sa valeur. Cela signifie que toute modification apportée à la variable à l'intérieur de la fonction affecte également la variable d'origine en dehors de la fonction.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 75,
    name: "polymorphisme",
    src: "/assets/polymorphisme.png",
    alt: "",
    description: "En programmation orientée objet, le polymorphisme est la capacité d'une même méthode à fonctionner de différentes manières selon le contexte.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 76,
    name: "polymorphisme",
    src: "/assets/polymorphisme_heritage.png",
    alt: "",
    description: "En programmation orientée objet, le polymorphisme est la capacité d'une même méthode à fonctionner de différentes manières selon le contexte.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 77,
    name: "Portée",
    src: "/assets/portee3.png",
    alt: "",
    description: "En programmation, la portée (ou \"scope\" en anglais) désigne la zone du code où une variable, une fonction ou un objet est accessible.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 78,
    name: "Privé",
    src: "/assets/private1.png",
    alt: "",
    description: "En programmation orientée objet, le terme \"privé\" fait référence à un niveau d'accès qui restreint l'utilisation d'une variable ou d'une méthode à l'intérieur de la classe où elle a été définie.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 79,
    name: "Privé",
    src: "/assets/private2.png",
    alt: "",
    description: "En programmation orientée objet, le terme \"privé\" fait référence à un niveau d'accès qui restreint l'utilisation d'une variable ou d'une méthode à l'intérieur de la classe où elle a été définie.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 80,
    name: "private package",
    src: "/assets/private_package3.png",
    alt: "",
    description: "Dans certains langages de programmation orientée objet comme Java, un \"package privé\" (ou \"package-private\") est un niveau d'accès qui permet aux classes, méthodes et variables d'être visibles et accessibles uniquement au sein du même package.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 81,
    name: "private package",
    src: "/assets/private_package4.png",
    alt: "",
    description: "Dans certains langages de programmation orientée objet comme Java, un \"package privé\" (ou \"package-private\") est un niveau d'accès qui permet aux classes, méthodes et variables d'être visibles et accessibles uniquement au sein du même package.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 82,
    name: "Procedure",
    src: "/assets/procedure.png",
    alt: "",
    description: "Une procédure est un ensemble d'instructions regroupées sous un même nom qui effectuent une tâche spécifique.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 83,
    name: "Procedure",
    src: "/assets/procedure2.png",
    alt: "",
    description: "Une procédure est un ensemble d'instructions regroupées sous un même nom qui effectuent une tâche spécifique.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 84,
    name: "Processus",
    src: "/assets/processus.png",
    alt: "",
    description: "Un processus est une instance d'un programme en cours d'exécution.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 85,
    name: "Protected",
    src: "/assets/protected2.png",
    alt: "",
    description: "En programmation orientée objet, le terme \"protected\" (ou \"protégé\" en français) est un niveau d'accès qui permet de restreindre l'accès à une variable ou une méthode. Les membres (variables et méthodes) déclarés comme protégés sont accessibles uniquement à la classe dans laquelle ils sont définis et aux classes qui en héritent (c'est-à-dire les sous-classes).",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 86,
    name: "Protected",
    src: "/assets/protected3.png",
    alt: "",
    description: "En programmation orientée objet, le terme \"protected\" (ou \"protégé\" en français) est un niveau d'accès qui permet de restreindre l'accès à une variable ou une méthode. Les membres (variables et méthodes) déclarés comme protégés sont accessibles uniquement à la classe dans laquelle ils sont définis et aux classes qui en héritent (c'est-à-dire les sous-classes).",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 87,
    name: "Prototype",
    src: "/assets/prototype.png",
    alt: "",
    description: "En programmation, un prototype fait référence à une première version d'une fonction, d'une méthode ou d'un objet qui définit la structure ou l'interface sans inclure les détails de l'implémentation. Le concept de prototype est utilisé pour décrire comment une fonction ou un objet devrait se comporter, permettant ainsi aux développeurs de planifier et de concevoir leurs programmes avant de les écrire complètement.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 88,
    name: "Public",
    src: "/assets/public.png",
    alt: "",
    description: "En programmation orientée objet, la portée publique (ou \"public\" en anglais) fait référence à un niveau d'accès qui permet à des variables et des méthodes d'être accessibles depuis n'importe où dans le programme.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 89,
    name: "Public",
    src: "/assets/public2.png",
    alt: "",
    description: "En programmation orientée objet, la portée publique (ou \"public\" en anglais) fait référence à un niveau d'accès qui permet à des variables et des méthodes d'être accessibles depuis n'importe où dans le programme.",
    author: "Fabien Poirier",
    category: "OOP",
  },
  {
    id: 90,
    name: "Random",
    src: "/assets/random.png",
    alt: "",
    description: "Aléatoire",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 91,
    name: "Recursivité",
    src: "/assets/recursivite.png",
    alt: "",
    description: "La récursion est une technique de programmation où une fonction s'appelle elle-même pour résoudre un problème.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 92,
    name: "Recursivité",
    src: "/assets/recursion.gif",
    alt: "",
    description: "La récursion est une technique de programmation où une fonction s'appelle elle-même pour résoudre un problème.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 93,
    name: "REGEX",
    src: "/assets/regex.png",
    alt: "",
    description: "Une expression régulière est une séquence de caractères qui forme un motif de recherche.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 94,
    name: "La casse",
    src: "/assets/sensible_a_la_casse.png",
    alt: "",
    description: "En programmation, \"la casse\" fait référence à la façon dont les lettres d'un mot sont écrites, en particulier la distinction entre les majuscules et les minuscules.",
    author: "Fabien Poirier",
    category: "Expression",
  },
  {
    id: 95,
    name: "Signed / Unsigned",
    src: "/assets/signed_unsigned.png",
    alt: "",
    description: "Signed fait référence à un type de données qui peut représenter à la fois des nombres positifs et négatifs, tandis que unsigned ne peut représenter que des nombres positifs.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 96,
    name: "Switch Case",
    src: "/assets/switch_case.png",
    alt: "",
    description: "Le switch case est une structure de contrôle qui permet de choisir parmi plusieurs options en fonction de la valeur d'une variable.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 97,
    name: "Switch Case",
    src: "/assets/switch_case2.png",
    alt: "",
    description: "Le switch case est une structure de contrôle qui permet de choisir parmi plusieurs options en fonction de la valeur d'une variable.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 98,
    name: "Switch Case",
    src: "/assets/switch_case3.png",
    alt: "",
    description: "Le switch case est une structure de contrôle qui permet de choisir parmi plusieurs options en fonction de la valeur d'une variable.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 99,
    name: "Thread",
    src: "/assets/threads.png",
    alt: "",
    description: "Un thread est une unité d'exécution d'un programme qui permet de réaliser plusieurs tâches en parallèle. ",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 100,
    name: "Try / Catch / Finally",
    src: "/assets/try_catch_finally.gif",
    alt: "",
    description: "Try, catch, finally : Ce sont des structures de contrôle utilisées dans la programmation pour gérer les erreurs. Le bloc try contient le code qui pourrait causer une erreur, le bloc catch est exécuté si une erreur se produit dans le bloc try, et le bloc finally est toujours exécuté à la fin, que l'erreur se soit produite ou non.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 101,
    name: "Type",
    src: "/assets/type2.png",
    alt: "",
    description: "En programmation, un type est une catégorie qui définit le genre de données qu'une variable peut contenir.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 102,
    name: "Continue",
    src: "/assets/continue.gif",
    alt: "",
    description: "Le mot-clé continue est utilisé dans les structures de contrôle de boucle pour passer immédiatement à l'itération suivante de la boucle, en sautant le reste du code qui suit l'instruction.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 103,
    name: "Break",
    src: "/assets/break.gif",
    alt: "",
    description: "Le mot-clé break est utilisé dans les structures de contrôle de boucle pour arreter immédiatement la boucle.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 104,
    name: "Boucle",
    src: "/assets/boucle.gif",
    alt: "",
    description: "Une boucle est une structure de contrôle qui permet de répéter une série d'instructions plusieurs fois. Elle continue de s'exécuter tant qu'une certaine condition est vraie.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 105,
    name: "Algorithme",
    src: "/assets/algo.gif",
    alt: "",
    description: "Un algorithme est une série d'instructions ou de règles définies pour résoudre un problème ou effectuer une tâche spécifique.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 106,
    name: "Affectation",
    src: "/assets/affectation2.png",
    alt: "",
    description: "L'affectation consiste à donner une valeur à une variable dans un programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 107,
    name: "Apprentissage par renforcement",
    src: "/assets/apprentissage_par_renforcement.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 108,
    name: "Arbre",
    src: "/assets/arbre.png",
    alt: "",
    description: "Un arbre est une structure de données organisée de manière hiérarchique, composée de \"nœuds\" connectés entre eux. Chaque nœud peut avoir des sous-nœuds appelés \"enfants\". Le nœud principal est appelé \"racine\", et les nœuds sans enfants sont appelés \"feuilles\".",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 109,
    name: "Arbre de décision",
    src: "/assets/arbre_de_decision.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Machine Learning",
  },
  {
    id: 110,
    name: "Batch",
    src: "/assets/batch.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Machine Learning",
  },
  {
    id: 111,
    name: "Bidirectionnal LSTM",
    src: "/assets/bidirectional_lstm.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 112,
    name: "Brute force",
    src: "/assets/brute_force.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Cyber sécurité",
  },
  {
    id: 113,
    name: "Debug",
    src: "/assets/debug.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 114,
    name: "Deep Fake",
    src: "/assets/deep_fake.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 115,
    name: "Labelisé",
    src: "/assets/données_labelisé.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Machine Learning",
  },
  {
    id: 116,
    name: "Exploration / Exploitation.png",
    src: "/assets/exploration_vs_exploitation2.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 117,
    name: "GAN",
    src: "/assets/gan.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 118,
    name: "Hachage / Salage",
    src: "/assets/hachage.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Cyber sécurité",
  },
  {
    id: 119,
    name: "Interpréter",
    src: "/assets/interpreter.gif",
    alt: "",
    description: "Un programme interprété est lu et exécuté ligne par ligne, sans avoir besoin de le compiler au préalable en un fichier exécutable.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 120,
    name: "Men in the middle",
    src: "/assets/men_in_the_middle.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Cyber sécurité",
  },
  {
    id: 121,
    name: "Modulo",
    src: "/assets/modulo2.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 122,
    name: "Muable / immuable",
    src: "/assets/muable_immuable.gif",
    alt: "",
    description: "Les objets mutables peuvent être modifiés après leur création il est donc possible d'y ajouter des element ou en supprimer, tandis que les objets immuables ne peuvent pas être changés une fois créés.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 123,
    name: "Objet / Structure",
    src: "/assets/objet_vs_structureV2.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 124,
    name: "Pointeur",
    src: "/assets/pointeur3.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 125,
    name: "Réseaux de neurones",
    src: "/assets/reseau_de_neurone.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 126,
    name: "Sémaphore",
    src: "/assets/semaphore.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 127,
    name: "Static",
    src: "/assets/statique_non_statique.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 128,
    name: "Apprentissage Supervisé",
    src: "/assets/supervised_learning_goal.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 129,
    name: "Apprentissage Supervisé",
    src: "/assets/supervised_learning_train.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 130,
    name: "Surchage",
    src: "/assets/surcharge.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 131,
    name: "Swap",
    src: "/assets/swap.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 132,
    name: "Swap",
    src: "/assets/swap2.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 133,
    name: "Swap",
    src: "/assets/swap_mecanique.gif",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 134,
    name: "Type primitif",
    src: "/assets/type_primitif.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 135,
    name: "Entraînement non supervisé",
    src: "/assets/unsupervised_learning_goal.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 136,
    name: "Entraînement non supervisé",
    src: "/assets/unsupervised_learning_train.png",
    alt: "",
    description: "",
    author: "Fabien Poirier",
    category: "Deep Learning",
  },
  {
    id: 137,
    name: "Variable",
    src: "/assets/variable.png",
    alt: "",
    description: "Une variable est un espace de mémoire identifié par un nom qui peut contenir une valeur.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
  {
    id: 138,
    name: "Variable / Constante",
    src: "/assets/variable_vs_constante.gif",
    alt: "",
    description: "Une variable est un espace de mémoire identifié par un nom qui peut contenir une valeur pouvant changer contrairement a une constante qui est un type de variable possédant une valeur destiné à resté la même tout au long du programme.",
    author: "Fabien Poirier",
    category: "Programmation",
  },
];
